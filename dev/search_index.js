var documenterSearchIndex = {"docs":
[{"location":"man/start/#Get-Started","page":"Get Started","title":"Get Started","text":"","category":"section"},{"location":"man/start/","page":"Get Started","title":"Get Started","text":"This package is now featured on the official general Julia package registry.  Simply use Julia's package manager pkg to add TrendDecomposition to your preferred environment.","category":"page"},{"location":"man/start/","page":"Get Started","title":"Get Started","text":"@(v1.11) pkg> add TrendDecomposition\n\njulia> using TrendDecomposition","category":"page"},{"location":"man/start/","page":"Get Started","title":"Get Started","text":"The developing branch of this package can either be employed  by cloning this repository or by using the Julia package manager. With the package manager simply use the add command:","category":"page"},{"location":"man/start/","page":"Get Started","title":"Get Started","text":"@(v1.11) pkg> add https://github.com/sdBrinkmann/TrendDecomposition.jl","category":"page"},{"location":"man/start/","page":"Get Started","title":"Get Started","text":"warning: Warning\nThis package is currently under rapid development and follows Semantic Versioning. Until the 1.0.0 release is reached, the API of this package can change with any minor version update,  please  consult the documentation of this package after each update when using this package.","category":"page"},{"location":"man/start/#Usage","page":"Get Started","title":"Usage","text":"","category":"section"},{"location":"man/start/","page":"Get Started","title":"Get Started","text":"The basic usage is demonstrated with the US industrial production index (IPI) provided by FRED data service.","category":"page"},{"location":"man/start/","page":"Get Started","title":"Get Started","text":"using TrendDecomposition\nusing CSV\n\n# Set path to directory where time series is located\npath = \"/.../data\"\n\nIPI = CSV.read(\"$(path)/IPB50001SQ.csv\", copycols=true)\n\n# HP filter with λ = 1600\nhp = HP(IPI[!, 2], 1600)\n\n# The above is equivalent to Whittaker-Henderson smoothing with m = 2 differentiation\nwh = bohl_filter(IPI[!, 2], 2, 1600)\n\n# Boosted HP filter with baysian-type information criterion (BIC)\nbHP_bic = bHP(IPI[!, 2], 1600, Criterion=\"BIC\")\n\n# Boosted HP filter with augmented Dickey-Fuller (ADF) test \nbHP_adf = bHP(IPI[!, 2], 1600, Criterion=\"ADF\", p=0.01)","category":"page"},{"location":"man/start/","page":"Get Started","title":"Get Started","text":"(Image: HP Results)","category":"page"},{"location":"#TrendDecomposition.jl","page":"Introduction","title":"TrendDecomposition.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Welcome to the TrendDecomposition.jl documentation.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"TrendDecomposition.jl is a Julia package for decomposition of time series into trend and cycle components. More generally it provides  both (stochastic) trend component estimation and forecasting, though not all methods are suitable for forecasting.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"By using filters and smoothers the most pragmatic approach to trend decomposition is estimating the trend t and defining the cyclical component c of time series y as c = y - t. Often it is up to the user of this module to calculate the cyclical components themselves with the computed trend returned from a function  provided by this module.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For now this package implements the Hodrick-Prescott (HP) filter as well as its generalization, generally known as Whittaker-Henderson smoothing, in this package named bohl_filter after its first inventor George Bohlmann.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"In addition this module tries to implement also more novel approaches; so far the boosted HP Filter based  on Peter Phillips and Zhentao Shi (2019): \"Boosting the Hodrick-Prescott Filter\"  has been implemented.","category":"page"},{"location":"man/api/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"man/api/","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"man/api/#TrendDecomposition.HP","page":"API","title":"TrendDecomposition.HP","text":"HP(x::Vector, λ::Real)\n\nApply the Hodrick-Prescott decomposition to vector x with multiplier value λ.\n\nFunction returns the trend component.\n\n\n\n\n\nHP(x::Vector, λ::Real, iter::Int)\n\nCompute boosted Hodrick-Prescott filter with number of iterations specified by iter.\n\nFunction returns the trend component.\n\n\n\n\n\n","category":"function"},{"location":"man/api/#TrendDecomposition.bHP","page":"API","title":"TrendDecomposition.bHP","text":"bHP(x::Vector, λ::Real; Criterion=\"BIC\", max_iter::Int = 100, p::Float64=0.05)\n\nComputes the boosted Hodrick-Prescott filter by appyling the filter iterativly over the trend component with stop criterion being either a Bayesian-type information criterion (BIC) or an augmented Dickey-Fuller (ADF) test.\n\nFunction returns the trend component.\n\n\n\n\n\n","category":"function"},{"location":"man/api/#TrendDecomposition.bohl_filter","page":"API","title":"TrendDecomposition.bohl_filter","text":"bohl_filter(x :: Vector, m :: Int, λ :: Real)\n\nThis is the generalization of the Hodrick-Prescott filter, also known as Whittaker-Henderson smoothing, using the m-th difference to estimate the trend component.\n\n\n\n\n\n","category":"function"}]
}
